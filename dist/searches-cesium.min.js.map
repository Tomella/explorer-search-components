{"version":3,"sources":["searches-cesium.min.js","searchmapservice.ts"],"names":["CesiumDrawing","CesiumDrawing.drawingFactory","CesiumDrawing.DataType","CesiumDrawing.GeoJsonDraper","CesiumDrawing.GeoJsonDraper.constructor","CesiumDrawing.GeoJsonDraper.draw","window","alert","error","CesiumDrawing.GeoJsonDraper.erase","CesiumDrawing.GeoJsonDraper.destroy","CesiumDrawing.GeoJsonDraper.isDrawn","CesiumDrawing.MapLabel","CesiumDrawing.MapLabel.constructor","CesiumDrawing.MapLabel.draw","CesiumDrawing.MapLabel.isDrawn","CesiumDrawing.MapLabel.erase","CesiumDrawing.MapLabel.destroy","angular","module","factory","viewerService","viewer","getViewer","cesiumViewer","getDrawer","search","drawingFactory","goTo","polygon","xMax","xMin","yMin","yMax","coordinates","forEach","value","position","maxBounds","animate"],"mappings":"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","file":"searches-cesium.min.js","sourcesContent":["/***\r\n  * ExplorerSearches - Explorer searches components.\r\n  * @version v0.0.1-SNAPSHOT\r\n  * @link http://www.ga.gov.au/\r\n  * @license Copyright 2015 Geoscience Australia (http://www.ga.gov.au/copyright.html)\r\n  */\r\n  \r\n  var CesiumDrawing;!function(e){function i(e,i){var r=t[i.type];return r==t.GeoJSONPoint?new n(e,i,null):r==t.GeoJSONUrl?new o(e,i,null):null}e.drawingFactory=i,function(e){e[e.GeoJSONPoint=0]=\"GeoJSONPoint\",e[e.GeoJSONUrl=1]=\"GeoJSONUrl\"}(e.DataType||(e.DataType={}));var t=e.DataType,o=function(){function e(e,i,t){this.scene=e.scene,this.data=i,this.options=t}return e.prototype.draw=function(){var e=this;this.primitiveCollection=new Cesium.PrimitiveCollection,Cesium.GeoJsonDataSource.load(this.data.url).then(function(i){for(var t=0;t<i.entities.values.length;t++){var o,n=i.entities.values[t];if(void 0!==n.polygon&&(o=new Cesium.PolygonGeometry({polygonHierarchy:n.polygon.hierarchy._value})),void 0!==n.polyline&&(o=new Cesium.PolygonGeometry({polygonHierarchy:{positions:n.polyline.positions._value}})),o){var r=new Cesium.GeometryInstance({geometry:o,id:\"instance\",attributes:{color:new Cesium.ColorGeometryInstanceAttribute(0,1,1,.3)}}),s=new Cesium.GroundPrimitive({geometryInstance:r,appearance:new Cesium.PerInstanceColorAppearance({translucent:!1,closed:!0})});e.primitiveCollection.add(s)}}e.scene.primitives.add(e.primitiveCollection)}).otherwise(function(e){window.alert(e)})},e.prototype.erase=function(){this.scene&&this.primitiveCollection&&(this.scene.primitives.remove(this.primitiveCollection),this.primitiveCollection=null)},e.prototype.destroy=function(){this.erase(),this.scene=this.data=null},e.prototype.isDrawn=function(){return!this.primitiveCollection},e}();e.GeoJsonDraper=o;var n=function(){function e(e,i,t){this.entities=null,this.options={},t&&(this.options=t),this.viewer=e,this.container=i}return e.prototype.draw=function(){var e=this.container.data.geometry.coordinates;this.erase(),this.entities=this.viewer.entities.add({position:Cesium.Cartesian3.fromDegrees(e[1],e[0]),point:{pixelSize:4,color:Cesium.Color.YELLOW,outlineColor:Cesium.Color.BLACK,outlineWidth:2},label:{text:this.container.data.properties.name,font:\"16px Helvetica\",fillColor:Cesium.Color.BLACK,outlineColor:Cesium.Color.WHITE,outlineWidth:2,horizontalOrigin:Cesium.HorizontalOrigin.LEFT,pixelOffset:new Cesium.Cartesian2(10,0)}})},e.prototype.isDrawn=function(){return null!=this.entities},e.prototype.erase=function(){this.entities&&(this.viewer.entities.remove(this.entities),this.entities=null)},e.prototype.destroy=function(){this.erase()},e}();e.MapLabel=n}(CesiumDrawing||(CesiumDrawing={})),function(e){\"use strict\";e.module(\"exp.search.map.service\",[]).factory(\"searchMapService\",[\"viewerService\",function(e){var i=null;return e.getViewer(function(e){i=e}),{getDrawer:function(e){return CesiumDrawing.drawingFactory(i,e)},goTo:function(i){var t=-1e3,o=1e3,n=1e3,r=1e3;i.coordinates&&i.coordinates.forEach(function(e){e&&e.forEach(function(e){e[0]>t&&(t=e[0]),e[0]<o&&(o=e[0]),e[1]>r&&(r=e[1]),e[1]<n&&(n=e[1])})}),e.goTo({maxBounds:[[n,o],[r,t]],animate:!0})}}}])}(angular);\n//# sourceMappingURL=searches-cesium.min.js.map\n","/// <reference path=\"../../../typings/tsd.d.ts\" />\r\n\r\n/*\r\n * Copyright 2015 Geoscience Australia (http://www.ga.gov.au/copyright.html)\r\n */\r\n\r\n\r\ndeclare var Cesium: any;\r\n/**\r\n * This package is to handle the artefacts produced by the search events indirectly.\r\n * There is no reason that it could be used for other like packages.\r\n */\r\nmodule CesiumDrawing {\r\n  export interface Drawing {\r\n    draw(): void;\r\n    isDrawn(): boolean;\r\n    erase(): void;\r\n    destroy(): void;\r\n  }\r\n    \r\n  export function drawingFactory(viewer: any, data: any): Drawing {\r\n    var type: DataType = DataType[<string>data.type]; \r\n    \r\n    if( type == DataType.GeoJSONPoint) {\r\n      return new MapLabel(viewer, data, null);\r\n    } else if (type == DataType.GeoJSONUrl) {\r\n      return new GeoJsonDraper(viewer, data, null);\r\n    }\r\n    return null;   \r\n  }\r\n    \r\n  export enum DataType {GeoJSONPoint, GeoJSONUrl};\r\n    \r\n  export class GeoJsonDraper implements Drawing {\r\n    private primitiveCollection: any;\r\n    private data: any;\r\n    private scene: any;\r\n    private options: any;\r\n    \r\n    constructor(viewer:any, data: any, options: any) {\r\n      this.scene = viewer.scene;\r\n      this.data = data;\r\n      this.options = options;\r\n    }  \r\n    \r\n    draw(): void {\r\n      this.primitiveCollection = new Cesium.PrimitiveCollection();\r\n      \r\n      Cesium.GeoJsonDataSource.load(this.data.url).then((dataSource:any) => {\r\n        var primitiveArr: any[] = [];\r\n                    \r\n        for (var i=0; i < dataSource.entities.values.length; i++) {\r\n          var _entity:any = dataSource.entities.values[i];\r\n          var _geometry : any;\r\n          \r\n          if (_entity.polygon !== undefined) {\r\n            _geometry = new Cesium.PolygonGeometry({\r\n              polygonHierarchy : _entity.polygon.hierarchy._value\r\n            });\r\n          }\r\n          \r\n            if (_entity.polyline !== undefined) {\r\n              _geometry = new Cesium.PolygonGeometry({\r\n                polygonHierarchy : {\r\n                  positions : _entity.polyline.positions._value\r\n                }\r\n              });\r\n            }\r\n                    \r\n            if (!_geometry) {\r\n              continue;\r\n            }\r\n                    \r\n            var _geometryInstance:any = new Cesium.GeometryInstance({\r\n              geometry : _geometry,\r\n              id : 'instance',\r\n              attributes : {\r\n                color : new Cesium.ColorGeometryInstanceAttribute(0.0, 1.0, 1.0, 0.3)\r\n              }\r\n            });\r\n                    \r\n            var primitive = new Cesium.GroundPrimitive({\r\n              geometryInstance : _geometryInstance,\r\n              appearance : new Cesium.PerInstanceColorAppearance({\r\n              translucent : false,\r\n              closed : true\r\n            })\r\n          });\r\n                       \r\n          this.primitiveCollection.add(primitive)                   \r\n        }\r\n        this.scene.primitives.add(this.primitiveCollection);\r\n      }).otherwise(function(error : any){\r\n        //Display any errrors encountered while loading.\r\n        window.alert(error);\r\n      });\r\n    } \r\n    \r\n    erase(): void {\r\n      if (this.scene && this.primitiveCollection) {\r\n        this.scene.primitives.remove(this.primitiveCollection);\r\n        this.primitiveCollection = null\r\n      }\r\n    } \r\n    \r\n    destroy(): void {\r\n      this.erase();\r\n      this.scene = this.data = null;\r\n    }\r\n    \r\n    isDrawn(): boolean {\r\n      return !this.primitiveCollection;\r\n    }\r\n  }\r\n  \r\n  export class MapLabel implements Drawing {\r\n\t  private viewer: any;\r\n\t  private container: any;\r\n\t  private entities: any = null;\r\n\t  private options: any = {};\r\n\t  \r\n\t  constructor(viewer: any, data: any, options: any) {\r\n\t    if (options) {\r\n\t\t    this.options = options; \r\n\t    }\r\n\t    this.viewer = viewer;\r\n\t    this.container = data;\r\n    }\r\n   \r\n  \tdraw(): void {\r\n\t    var coordinates = this.container.data.geometry.coordinates;\r\n\t    this.erase();\r\n\t    this.entities = this.viewer.entities.add({\r\n        position : Cesium.Cartesian3.fromDegrees(coordinates[1], coordinates[0]),\r\n        point : {\r\n          pixelSize : 4,\r\n          color : Cesium.Color.YELLOW,\r\n          outlineColor: Cesium.Color.BLACK,\r\n          outlineWidth: 2\r\n        },\r\n        label : {\r\n          text : this.container.data.properties.name,\r\n          font : '16px Helvetica',\r\n          fillColor : Cesium.Color.BLACK,\r\n          outlineColor : Cesium.Color.WHITE,\r\n          outlineWidth : 2,\r\n          horizontalOrigin : Cesium.HorizontalOrigin.LEFT,\r\n          pixelOffset : new Cesium.Cartesian2(10, 0)\r\n        }\r\n\t    });\r\n    }\r\n\t\r\n    isDrawn(): boolean {\r\n      return this.entities != null;\r\n    }\r\n  \r\n  \terase(): void {\r\n\t  \tif(this.entities) {\r\n\t\t  \tthis.viewer.entities.remove(this.entities);\r\n        this.entities = null;\r\n\t\t  }\r\n\t  }\r\n\t\r\n\t  destroy(): void {\r\n\t\t  this.erase();\r\n\t  }\t  \r\n  }\r\n}\r\n\r\n\r\n(function(angular: ng.IAngularStatic) {\r\n'use strict';\r\n\r\nangular.module('exp.search.map.service', [])\r\n\r\n.factory('searchMapService', ['viewerService', function(viewerService: any) {\r\n\tvar viewer: any = null;\r\n\t\r\n\tviewerService.getViewer(function(cesiumViewer: any) {\r\n\t\tviewer = cesiumViewer;\r\n\t});\t\r\n\t\r\n\treturn {\r\n\t\tgetDrawer : function(search : Searches.ISearchPerformed) {\r\n\t\t\treturn CesiumDrawing.drawingFactory(viewer, search);\r\n\t\t},\r\n\t\t\r\n\t\tgoTo: function(polygon: GeoJSON.Polygon) {\r\n\t\t\tvar xMax  = -1000;\r\n\t\t\tvar xMin  = 1000;\r\n\t\t\tvar yMin  = 1000;\r\n\t\t\tvar yMax  = 1000;\r\n\t\t\t\r\n\t\t\tif(polygon.coordinates) {\r\n\t\t\t\tpolygon.coordinates.forEach(function (value: GeoJSON.Position[]) {\r\n\t\t\t\t\tif(value) {\r\n\t\t\t\t\t\tvalue.forEach(function(position: GeoJSON.Position) {\r\n\t\t\t\t\t\t\tif (position[0] > xMax) {\r\n\t\t\t\t\t\t\t\txMax = position[0];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (position[0] < xMin) {\r\n\t\t\t\t\t\t\t\txMin = position[0];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (position[1] > yMax) {\r\n\t\t\t\t\t\t\t\tyMax = position[1];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (position[1] < yMin) {\r\n\t\t\t\t\t\t\t\tyMin = position[1];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tviewerService.goTo({\r\n\t\t\t\tmaxBounds: [\r\n\t\t\t\t\t[yMin, xMin],\r\n\t\t\t\t\t[yMax, xMax]\r\n\t\t\t\t],\r\n\t\t\t\tanimate: true\r\n\t\t\t});\t\r\n\t\t}\r\n\t};\r\n}]);\r\n\r\n})(angular);"],"sourceRoot":"/source/"}