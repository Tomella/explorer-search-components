{"version":3,"sources":["searches.min.js","basinsearch/basinsearch.ts","geosearch/geosearch.ts","lastsearch/lastsearch.ts","lgasearch/lgasearch.ts","searches/searches.ts"],"names":["angular","Cesium","BasinsearchServiceProvider","basinsUrl","url","BasinsearchServiceProvider.basinServiceFactory","httpData","get","cache","then","response","basinData","basins","data","pan","bbox","region","polygon","type","coordinates","xMin","yMin","yMax","xMax","broadcastData","from","id","show","name","$rootScope","$broadcast","module","directive","$log","$timeout","basinService","restrict","transclude","templateUrl","link","scope","element","cancel","info","nameFilter","timeout","load","changing","zoomToLocation","provider","filter","list","max","lowerFilter","count","toLowerCase","some","item","indexOf","push","SearchMapping","google","$q","googleService","searchMapService","SPREAD_DEGREES","controller","$scope","values","zoom","marker","description","getAddressDetails","results","feature","geometry","lat","lon","properties","address","debug","error","factory","service","geocoder","maps","Geocoder","places","AutocompleteService","types","e","digester","deferred","defer","geocode","status","GeocoderStatus","OK","$apply","reject","resolve","location","lng","formatted_address","promise","$document","lastSearchService","keyupHandler","keyEvent","close","on","toggle","search","displayed","hide","clear","drawing","draw","erase","isShowing","isDrawn","this","$on","event","destroy","getDrawer","LgasearchServiceProvider","lgasUrl","LgasearchServiceProvider.lgaServiceFactory","lgaData","lgas","statesUrl","states","when","lgaService","replace","activate","active","state","showSearchButton","searches","add","console","log","template","require","label","attrs","ctrl"],"mappings":"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","file":"searches.min.js","sourcesContent":["/***\r\n  * ExplorerSearches - Explorer searches components.\r\n  * @version v0.0.1-SNAPSHOT\r\n  * @link http://www.ga.gov.au/\r\n  * @license Copyright 2015 Geoscience Australia (http://www.ga.gov.au/copyright.html)\r\n  */\r\n!function(e,n){\"use strict\";function t(){var e=\"service/basinsearch/basins\",n={};this.setReferenceUrl=function(n){e=n},this.$get=[\"$q\",\"$rootScope\",\"$timeout\",\"httpData\",\"searchMapService\",function(t,a,o,r,c){var i={load:function(){return r.get(e,{cache:!0}).then(function(e){return n.basins=e.data.basins,n})},zoomToLocation:function(e){function n(){c.goTo(o)}var t=e.bbox,o={type:\"Polygon\",coordinates:[[t.xMin,t.yMin],[t.xMin,t.yMax],[t.xMax,t.yMax],[t.xMax,t.yMin],[t.xMin,t.yMin]]},r={from:\"Basins search\",type:\"GeoJSONUrl\",url:\"/explorer-searches-services/service/basinsearch/basin/\"+e.id,pan:n,show:!0,name:e.name,polygon:o};a.$broadcast(\"search.performed\",r),n()}};return i}]}e.module(\"exp.search.basinsearch\",[]).directive(\"basinSearch\",[\"$log\",\"$timeout\",\"basinService\",function(e,n,t){return{restrict:\"AE\",transclude:!0,templateUrl:\"searches/basinsearch/basinsearch.html\",link:function(a,o){function r(){n.cancel(c),c=n(function(){e.info(\"Clear filter\"),a.nameFilter=\"\"},7e3)}var c;t.load().then(function(e){a.basinData=e}),a.changing=function(){e.info(\"Cancel close\"),n.cancel(c)},a.cancel=r,a.zoomToLocation=function(e){t.zoomToLocation(e),r()}}}}]).provider(\"basinService\",t).filter(\"basinFilterList\",function(){return function(e,n,t){var a,o,r=[];return n?(t||(t=50),a=n.toLowerCase(),e&&(o=0,e.some(function(e){return e.name.toLowerCase().indexOf(a)>-1&&(r.push(e),o++),o>t})),r):r}})}(angular,SearchMapping),function(e,n,t){\"use strict\";e.module(\"exp.search.geosearch\",[\"ngAutocomplete\"]).directive(\"geoSearch\",[\"$log\",\"$q\",\"$rootScope\",\"googleService\",\"searchMapService\",function(e,n,t,a,o){var r=.1;return{templateUrl:\"searches/geosearch/geosearch.html\",controller:[\"$scope\",function(n){n.values={from:{}},n.zoom=function(c){n.values.from.description&&a.getAddressDetails(n.values.from.description,n).then(function(a){function c(){o.goTo(d)}var i={type:\"Feature\",geometry:{type:\"Point\",coordinates:[a.lat,a.lon]},properties:{name:a.address}},s={from:\"Google search\",name:a.address,type:\"GeoJSONPoint\",pan:function(){c()},data:i},l=a.lon-r,u=a.lon+r,h=a.lat-r,f=a.lat+r,d={type:\"Polygon\",coordinates:[[[l,h],[l,f],[u,f],[u,h],[l,h]]]};return e.debug(\"Received the results for from\"),n.values.from.results=a,a&&(c(),t.$broadcast(\"search.performed\",s)),n.item=\"\",a},function(n){e.debug(\"Failed to complete the from lookup.\")})}}]}}]).factory(\"googleService\",[\"$log\",\"$q\",function(e,t){var a,o=new n.maps.Geocoder;try{a=new n.maps.places.AutocompleteService(null,{types:[\"geocode\"]})}catch(r){e.debug(\"Catching google error that manifests itself when debugging in Firefox only\")}return{getAddressDetails:function(e,a){var r=t.defer();return o.geocode({address:e,region:\"au\"},function(e,t){t!=n.maps.GeocoderStatus.OK?a.$apply(function(){r.reject(\"Failed to find address\")}):a.$apply(function(){r.resolve({lat:e[0].geometry.location.lat(),lon:e[0].geometry.location.lng(),address:e[0].formatted_address})})}),r.promise}}}])}(angular,google,Cesium),function(e){\"use strict\";e.module(\"exp.search.lastsearch\",[]).directive(\"geoLastSearch\",[\"$document\",\"lastSearchService\",function(e,n){return{restrict:\"AE\",transclude:!0,templateUrl:\"searches/lastsearch/lastsearch.html\",link:function(t,a){function o(e){27==e.which&&(e.stopPropagation(),e.preventDefault(),t.$apply(function(){t.close()}))}t.data=n.data,e.on(\"keyup\",o),t.toggle=function(){(t.data.search.displayed=!t.data.search.displayed)?n.show():n.hide()},t.pan=function(){t.data.search.pan()},t.close=function(){n.clear()}}}}]).factory(\"lastSearchService\",[\"$log\",\"$rootScope\",\"searchMapService\",function(e,n,t){var a,o={search:null},r={show:function(){a.draw()},hide:function(){a&&a.erase()},data:function(){return o},isShowing:function(){a.isDrawn()},clear:function(){this.hide(),o.search=null}};return n.$on(\"search.performed\",function(e,n){a&&a.destroy(),a=t.getDrawer(n),o.search=n,n.show&&a.show()}),r}])}(angular),function(e,n){\"use strict\";function t(){var e=\"service/lgasearch/states\",n=\"service/lgasearch/lgas\",t={};this.setReferenceUrl=function(e){n=e},this.$get=[\"$q\",\"$rootScope\",\"$timeout\",\"httpData\",\"searchMapService\",function(a,o,r,c,i){var s={load:function(){return c.get(n,{cache:!0}).then(function(e){t.lgas=e.data.lgas}),c.get(e,{cache:!0}).then(function(e){t.states=e.data.states}),a.when(t)},zoomToLocation:function(e){function n(){i.goTo(a)}var t=e.bbox,a={type:\"Polygon\",coordinates:[[t.xMin,t.yMin],[t.xMin,t.yMax],[t.xMax,t.yMax],[t.xMax,t.yMin],[t.xMin,t.yMin]]},r={from:\"LGA search\",type:\"GeoJSONUrl\",url:\"/explorer-searches-services/service/basinsearch/basin/\"+e.id,pan:n,show:!0,name:e.name,polygon:a};e.id&&o.$broadcast(\"search.performed\",r),n()}};return s}]}e.module(\"exp.search.lgasearch\",[]).directive(\"lgaSearch\",[\"$log\",\"$timeout\",\"lgaService\",function(e,n,t){return{restrict:\"AE\",transclude:!0,templateUrl:\"searches/lgasearch/lgasearch.html\",link:function(a,o){function r(){n.cancel(c),c=n(function(){e.info(\"Clear filter\"),a.nameFilter=\"\"},7e3)}var c;t.load().then(function(e){a.lgaData=e}),a.changing=function(){e.info(\"Cancel close\"),n.cancel(c)},a.cancel=r,a.zoomToLocation=function(e){t.zoomToLocation(e),r()}}}}]).provider(\"lgaService\",t).filter(\"lgaFilterList\",function(){return function(e,n,t){var a,o,r=[];return n?(t||(t=50),a=n.toLowerCase(),e&&(o=0,e.some(function(e){return e.name.toLowerCase().indexOf(a)>-1&&(r.push(e),o++),o>t})),r):r}})}(angular,Cesium),function(e){\"use strict\";e.module(\"exp.search.searches\",[]).directive(\"searchesSearches\",function(){return{restrict:\"AE\",replace:!0,transclude:!0,templateUrl:\"searches/searches/searches.html\",scope:{name:\"@\"},controller:[\"$scope\",function(e){function n(n){e.state.searches.forEach(function(e){e.active=!1}),n.active=!0}e.state={showSearchButton:!0,searches:[]},e[\"switch\"]=function(e){n(e)},this.add=function(n){console.log(\"Adding\"),e.state.searches.push(n)},this.active=function(e){n(e)}}]}}).directive(\"searchesSearch\",function(){return{replace:!0,template:\"<div ng-transclude ng-show='active'></div>\",transclude:!0,require:\"^searchesSearches\",scope:{label:\"@\",active:\"=default\"},link:function(e,n,t,a){a.add(e)}}})}(angular);\n//# sourceMappingURL=searches.min.js.map\n","/// <reference path=\"../../../typings/tsd.d.ts\" />\r\n\r\n/*\r\n * Copyright 2015 Geoscience Australia (http://www.ga.gov.au/copyright.html)\r\n */\r\n\r\ndeclare var SearchMapping: any;\r\n\r\n(function(angular: ng.IAngularStatic, Cesium: any) {\r\n\r\n\t'use strict';\r\n\r\n\tangular.module(\"exp.search.basinsearch\", [])\r\n\r\n\t\t.directive(\"basinSearch\", ['$log', '$timeout', 'basinService', function($log: any, $timeout: any, basinService: any) {\r\n\t\t\treturn {\r\n\t\t\t\trestrict: \"AE\",\r\n\t\t\t\ttransclude: true,\r\n\t\t\t\ttemplateUrl: \"searches/basinsearch/basinsearch.html\",\r\n\t\t\t\tlink: function(scope: any, element: any) {\r\n\t\t\t\t\tvar timeout: any;\r\n\r\n\t\t\t\t\tbasinService.load().then(function(data: any): void {\r\n\t\t\t\t\t\tscope.basinData = data;\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tscope.changing = function(): void {\r\n\t\t\t\t\t\t$log.info(\"Cancel close\");\r\n\t\t\t\t\t\t$timeout.cancel(timeout);\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\tscope.cancel = cancel;\r\n\r\n\t\t\t\t\tscope.zoomToLocation = function(region: any): void {\r\n\t\t\t\t\t\tbasinService.zoomToLocation(region);\r\n\t\t\t\t\t\tcancel();\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\tfunction cancel(): void {\r\n\t\t\t\t\t\t$timeout.cancel(timeout);\r\n\t\t\t\t\t\ttimeout = $timeout(function() {\r\n\t\t\t\t\t\t\t$log.info(\"Clear filter\");\r\n\t\t\t\t\t\t\tscope.nameFilter = \"\";\r\n\t\t\t\t\t\t}, 7000);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t}])\r\n\r\n\t\t.provider(\"basinService\", BasinsearchServiceProvider)\r\n\r\n\t\t.filter(\"basinFilterList\", function() {\r\n\t\t\treturn function(list: any, filter: any, max: number) {\r\n\t\t\t\tvar response: any[] = [],\r\n\t\t\t\t\tlowerFilter: any, count: number;\r\n\r\n\t\t\t\tif (!filter) {\r\n\t\t\t\t\treturn response;\r\n\t\t\t\t}\r\n\t\t\t\tif (!max) {\r\n\t\t\t\t\tmax = 50;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlowerFilter = filter.toLowerCase();\r\n\r\n\t\t\t\tif (list) {\r\n\t\t\t\t\tcount = 0;\r\n\t\t\t\t\tlist.some(function(item: any) {\r\n\t\t\t\t\t\tif (item.name.toLowerCase().indexOf(lowerFilter) > -1) {\r\n\t\t\t\t\t\t\tresponse.push(item);\r\n\t\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn count > max;\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\treturn response;\r\n\t\t\t};\r\n\t\t});\r\n\r\n\tfunction BasinsearchServiceProvider() : any {\r\n\t\tvar basinsUrl: string = \"service/basinsearch/basins\",\r\n\t\t\tbasinShapeUrl: string = \"service/basinsearch/basin/\",\r\n\t\t\tbasinData: any = {};\r\n\r\n\t\tthis.setReferenceUrl = function(url: string) {\r\n\t\t\tbasinsUrl = url;\r\n\t\t};\r\n\r\n\t\tthis.$get = ['$q', '$rootScope', '$timeout', 'httpData', 'searchMapService', \r\n\t\t\t\tfunction basinServiceFactory($q: any, $rootScope:any, $timeout: any, httpData: any, searchMapService: Searches.ISearchMapService) {\r\n\t\t\tvar service: any = {\r\n\t\t\t\tload: function() {\r\n\t\t\t\t\treturn httpData.get(basinsUrl, { cache: true }).then(function(response: any) {\r\n\t\t\t\t\t\tbasinData.basins = response.data.basins;\r\n\t\t\t\t\t\treturn basinData;\r\n\t\t\t\t\t});\r\n\t\t\t\t},\r\n\r\n\t\t\t\tzoomToLocation: function(region: any) {\r\n\t\t\t\t\tvar bbox: any = region.bbox;\r\n\t\t\t\t\tvar polygon: GeoJSON.Polygon = {\r\n\t\t\t\t\t\ttype: \"Polygon\",\r\n\t\t\t\t\t\tcoordinates: [\r\n\t\t\t\t\t\t\t[bbox.xMin, bbox.yMin],\r\n\t\t\t\t\t\t\t[bbox.xMin, bbox.yMax],\r\n\t\t\t\t\t\t\t[bbox.xMax, bbox.yMax],\r\n\t\t\t\t\t\t\t[bbox.xMax, bbox.yMin],\r\n\t\t\t\t\t\t\t[bbox.xMin, bbox.yMin]\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t};\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar broadcastData: Searches.ISearchPerformed = {\r\n                      \tfrom: \"Basins search\",\r\n                      \ttype: \"GeoJSONUrl\",\r\n                      \turl: '/explorer-searches-services/service/basinsearch/basin/' + region.id,\r\n\t\t\t \t\t\tpan: pan,\r\n\t\t\t\t\t\tshow: true,\r\n                        name: region.name,\r\n                        polygon: polygon\r\n\t\t\t\t\t};\r\n\t\t\t\t\t\r\n                    $rootScope.$broadcast('search.performed', broadcastData);\r\n\r\n\t\t\t\t\tpan();\r\n\r\n\t\t\t\t\tfunction pan() {\r\n\t\t\t\t\t\tsearchMapService.goTo(polygon);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\treturn service;\r\n\t\t}];\r\n\t}\r\n\r\n})(angular, SearchMapping);","/// <reference path=\"../../../typings/tsd.d.ts\" />\r\n\r\n/*\r\n * Copyright 2015 Geoscience Australia (http://www.ga.gov.au/copyright.html)\r\n */\r\n\r\ndeclare var google: any;\r\ndeclare var Cesium: any;\r\n\r\ninterface IGeoSearchResults {\r\n    address: string;\r\n    lat: number;\r\n    lon: number;\r\n}\r\n\r\n(function(angular: ng.IAngularStatic, google:any, Cesium:any) {\r\n\r\n'use strict';\r\n  \r\n\r\nangular.module('exp.search.geosearch', ['ngAutocomplete'])\r\n\r\n.directive('geoSearch', ['$log', '$q', '$rootScope', 'googleService', 'searchMapService',\r\n                       function($log : any, $q : any, $rootScope:any, googleService : any, searchMapService:any) {\r\n    var SPREAD_DEGREES : number = 0.1;\r\n    return {\r\n        templateUrl : 'searches/geosearch/geosearch.html',\r\n        controller:['$scope', function($scope : any) {\r\n            // Place holders for the google response.\r\n            $scope.values = {\r\n                from:{}\r\n            };\r\n            \r\n            $scope.zoom = function(marker : any) {\r\n                var promise:any,\r\n                    promises:any = [];\r\n\r\n                if(!$scope.values.from.description) {\r\n                    return;\r\n                }\r\n                \r\n                googleService.getAddressDetails($scope.values.from.description, $scope).then(function(results: IGeoSearchResults) {\r\n                    var feature: GeoJSON.Feature = {\r\n                        type: 'Feature',\r\n                        geometry: {\r\n                            type: 'Point',\r\n                            coordinates: [results.lat, results.lon],\r\n                        },\r\n                        properties: {\r\n                            name: results.address\r\n                        }\r\n                    };\r\n                    \r\n                    var broadcastData: Searches.ISearchPerformed = {\r\n                        from: \"Google search\",\r\n                        name: results.address,\r\n                        type: \"GeoJSONPoint\",\r\n                        pan: function() {\r\n                          pan();  \r\n                        },\r\n                        data: feature            \r\n                    };                    \r\n                    var xMin = results.lon - SPREAD_DEGREES;\r\n                    var xMax = results.lon + SPREAD_DEGREES;\r\n                    var yMin = results.lat - SPREAD_DEGREES;\r\n                    var yMax = results.lat + SPREAD_DEGREES;\r\n                    \r\n\t\t\t\t\tvar polygon: GeoJSON.Polygon = {\r\n\t\t\t\t\t\ttype: \"Polygon\",\r\n\t\t\t\t\t\tcoordinates: [[\r\n\t\t\t\t\t\t\t[xMin, yMin],\r\n\t\t\t\t\t\t\t[xMin, yMax],\r\n\t\t\t\t\t\t\t[xMax, yMax],\r\n\t\t\t\t\t\t\t[xMax, yMin],\r\n\t\t\t\t\t\t\t[xMin, yMin]\r\n\t\t\t\t\t\t]]\r\n\t\t\t\t\t};\r\n                    \r\n                    $log.debug('Received the results for from');\r\n                    $scope.values.from.results = results;\r\n                    if(results) {\r\n                        pan();\r\n                        $rootScope.$broadcast('search.performed', broadcastData);\r\n                    }\r\n                    // Hide the dialog.\r\n                    $scope.item = '';\r\n                    return results;\r\n                    \r\n                    function pan() {\r\n                        searchMapService.goTo(polygon);\r\n                    }\r\n                }, function(error:any) {\r\n                    $log.debug('Failed to complete the from lookup.');                          \r\n                })\r\n            };\r\n        }]\r\n    };\r\n}])\r\n\r\n.factory('googleService', ['$log', '$q', function($log : any, $q : any) {\r\n    var geocoder:any = new google.maps.Geocoder(),\r\n        service:any;\r\n    try {\r\n        service = new google.maps.places.AutocompleteService(null, {\r\n                        types: ['geocode'] \r\n                    });\r\n    } catch(e) {\r\n        $log.debug(\"Catching google error that manifests itself when debugging in Firefox only\");\r\n    }\r\n\r\n    return {\r\n        getAddressDetails: function(address:any, digester:any) {\r\n            var deferred = $q.defer();\r\n            geocoder.geocode({ address: address, region: \"au\" }, function(results:any, status:any) {\r\n                if (status != google.maps.GeocoderStatus.OK) {\r\n                    digester.$apply(function() {\r\n                        deferred.reject(\"Failed to find address\");\r\n                    });\r\n                } else {\r\n                    digester.$apply(function() {\r\n                        deferred.resolve({\r\n                            lat: results[0].geometry.location.lat(),\r\n                            lon: results[0].geometry.location.lng(),\r\n                            address: results[0].formatted_address\r\n                        });\r\n                    });\r\n                }\r\n            });\r\n            return deferred.promise;   \r\n        }\r\n    };\r\n}]);\r\n    \r\n})(angular, google, Cesium);","/// <reference path=\"../../../typings/tsd.d.ts\" />\r\n/*\r\n * Copyright 2015 Geoscience Australia (http://www.ga.gov.au/copyright.html)\r\n */\r\n\r\ninterface LastSearchService {\r\n  show(): void;\r\n  hide(): void;\r\n  data: any;\r\n  clear(): void;\r\n  viewer: any;\r\n}\r\n\r\ninterface LastSearchData {\r\n  search: any;\r\n}\r\n\r\n(function(angular: ng.IAngularStatic) {\r\n'use strict';\r\n\r\n/*\r\n * Wiring\r\n */\r\nangular.module('exp.search.lastsearch', [])\r\n\r\n.directive('geoLastSearch', ['$document', 'lastSearchService',\r\n          function($document: any, lastSearchService: LastSearchService) {\r\n  return {\r\n    restrict : 'AE',\r\n    transclude : true,\r\n    templateUrl: 'searches/lastsearch/lastsearch.html',\r\n    link : function(scope:any, element:any) {\r\n      scope.data = lastSearchService.data;\r\n      \r\n      $document.on(\"keyup\", keyupHandler);\r\n\r\n      scope.toggle = function () {\r\n        if ((scope.data.search.displayed = !scope.data.search.displayed)) {\r\n          lastSearchService.show();\r\n        } else {\r\n          lastSearchService.hide();\r\n        }\r\n      };\r\n      \r\n      scope.pan = function() {\r\n        scope.data.search.pan();\r\n      }\r\n      \r\n      scope.close = function() {        \r\n          lastSearchService.clear();\r\n      }\r\n      \r\n      function keyupHandler(keyEvent: any) {\r\n    \t\t\tif(keyEvent.which == 27) {\r\n    \t\t\t\tkeyEvent.stopPropagation();\r\n    \t\t\t\tkeyEvent.preventDefault();\r\n    \t\t\t\tscope.$apply(function() {\r\n        \t\t\t\tscope.close();\r\n    \t\t\t\t});\r\n    \t\t\t}\r\n    \t\t}\r\n    }\r\n  };\r\n}]) \r\n\r\n.factory('lastSearchService', ['$log', '$rootScope', 'searchMapService', function ($log: ng.ILogService, $rootScope: ng.IRootScopeService, searchMapService: any) {\r\n    var data:LastSearchData = {\r\n      search: null\r\n    };\r\n    var drawing: any;\r\n    \r\n    var service = {\r\n      show: function() {\r\n        drawing.draw();\r\n      },\r\n    \r\n      hide: function() {\r\n        if(drawing) {\r\n          drawing.erase();\r\n        }       \r\n      },\r\n      data: function() {\r\n        return data;\r\n      },\r\n      \r\n      isShowing: function() {\r\n        drawing.isDrawn();\r\n      },\r\n      \r\n      clear: function (){\r\n        this.hide();\r\n        data.search = null;\r\n      }\r\n   };\r\n   \r\n   $rootScope.$on('search.performed', function(event : any, search : Searches.ISearchPerformed) {\r\n      if (drawing) {\r\n         drawing.destroy();\r\n      }\r\n      drawing = searchMapService.getDrawer(search);\r\n      data.search = search;\r\n          \r\n      if (search.show) {\r\n        drawing.show();\r\n      }\r\n   });\r\n   \r\n   return service;\r\n}]);\r\n\r\n})(angular);\r\n","/// <reference path=\"../../../typings/tsd.d.ts\" />\r\n/*\r\n * Copyright 2015 Geoscience Australia (http://www.ga.gov.au/copyright.html)\r\n */\r\n\r\ndeclare var Cesium:any;\r\n\r\n(function(angular: ng.IAngularStatic, Cesium :any) {\r\n'use strict';   \r\n\r\nangular.module(\"exp.search.lgasearch\", [])\r\n\r\n.directive(\"lgaSearch\", ['$log', '$timeout', 'lgaService', function($log:any, $timeout:any, lgaService:any) {\r\n    return {\r\n        restrict : \"AE\",\r\n        transclude:true,\r\n        templateUrl : \"searches/lgasearch/lgasearch.html\", \r\n        link : function(scope:any, element:any) {\r\n            var timeout:any;\r\n            \r\n            lgaService.load().then(function(data:any) :void {\r\n                scope.lgaData = data;\r\n            });\r\n            \r\n            scope.changing = function():void {\r\n                $log.info(\"Cancel close\");\r\n                $timeout.cancel(timeout);\r\n            };\r\n            \r\n            scope.cancel = cancel;\r\n            \r\n            scope.zoomToLocation = function(region:any) : void {\r\n                lgaService.zoomToLocation(region);\r\n                cancel();\r\n            };\r\n            \r\n            function cancel():void {\r\n                $timeout.cancel(timeout);\r\n                timeout = $timeout(function() {\r\n                    $log.info(\"Clear filter\");\r\n                    scope.nameFilter = \"\";\r\n                }, 7000);               \r\n            }\r\n        }\r\n    };\r\n}])\r\n\r\n.provider(\"lgaService\", LgasearchServiceProvider)\r\n\r\n.filter(\"lgaFilterList\", function() {\r\n    return function(list:any, filter:any, max:number) {\r\n        var response:any[] = [],\r\n            lowerFilter:any, count:number;\r\n        \r\n        if(!filter) {\r\n            return response;\r\n        }\r\n        if(!max) {\r\n            max = 50;\r\n        }\r\n        \r\n        lowerFilter = filter.toLowerCase();\r\n        \r\n        if(list) {\r\n            count = 0;\r\n            list.some(function(item:any) {\r\n                if(item.name.toLowerCase().indexOf(lowerFilter) > -1) {\r\n                    response.push(item);\r\n                    count++;\r\n                }\r\n                return count > max;\r\n            });\r\n        }\r\n        return response;\r\n    };\r\n});\r\n\r\nfunction LgasearchServiceProvider() : any {\r\n    var statesUrl:string = \"service/lgasearch/states\",\r\n        lgasUrl:string = \"service/lgasearch/lgas\",\r\n        lgaShapeUrl:string = \"service/lgasearch/lga/\",\r\n        lgaData:any = {},\r\n        lgaTimeout:any,\r\n        lgaLayer:any,\r\n        lgaFadeLayer:any, \r\n        removePrimitiveTimeout : any,\r\n        scene : any;\r\n    \r\n    this.setReferenceUrl = function(url:string) {\r\n        lgasUrl = url;\r\n    };  \r\n    \r\n    this.$get = ['$q', '$rootScope', '$timeout', 'httpData', 'searchMapService', function lgaServiceFactory($q:any, $rootScope:any, $timeout:any, httpData:any, searchMapService:any) {\r\n        var service:any = {\r\n            load : function() {\r\n                httpData.get(lgasUrl, {cache : true}).then(function(response:any) {\r\n                    lgaData.lgas = response.data.lgas;\r\n                }); \r\n                \r\n                httpData.get(statesUrl, {cache : true}).then(function(response:any) {\r\n                    lgaData.states = response.data.states;\r\n                });\r\n                return $q.when(lgaData);\r\n            },\r\n            \r\n            zoomToLocation : function(region:any) {                \r\n                var bbox:any = region.bbox;\r\n                \r\n\t\t\t\tvar polygon: GeoJSON.Polygon = {\r\n\t\t\t\t\ttype: \"Polygon\",\r\n\t\t\t\t\tcoordinates: [\r\n\t\t\t\t\t\t[bbox.xMin, bbox.yMin],\r\n\t\t\t\t\t\t[bbox.xMin, bbox.yMax],\r\n\t\t\t\t\t\t[bbox.xMax, bbox.yMax],\r\n\t\t\t\t\t\t[bbox.xMax, bbox.yMin],\r\n\t\t\t\t\t\t[bbox.xMin, bbox.yMin]\r\n\t\t\t\t\t]\r\n\t\t\t\t};\r\n                \r\n                var broadcastData: Searches.ISearchPerformed = {\r\n                   from: \"LGA search\",\r\n                   type: \"GeoJSONUrl\",\r\n                   url: '/explorer-searches-services/service/basinsearch/basin/' + region.id,\r\n\t\t\t \t   pan: pan,\r\n\t\t\t       show: true,\r\n                   name: region.name,\r\n                   polygon: polygon\r\n\t\t\t    };\r\n                \r\n                if(region.id) {\r\n                    $rootScope.$broadcast('search.performed', broadcastData);\r\n                }\r\n                pan();\r\n                function pan() {\r\n                    searchMapService.goTo(polygon);\r\n                }\r\n            }\r\n        };  \r\n        return service;\r\n    }];\r\n}\r\n})(angular, Cesium);","/// <reference path=\"../../../typings/tsd.d.ts\" />\r\n\r\n/*\r\n * Copyright 2015 Geoscience Australia (http://www.ga.gov.au/copyright.html)\r\n */\r\n\r\n\r\n(function(angular: ng.IAngularStatic) {\r\n'use strict';\r\n\r\nangular.module(\"exp.search.searches\", [])\r\n\r\n.directive('searchesSearches', function() {\r\n    return {\r\n        restrict : \"AE\",\r\n        replace : true,\r\n        transclude:true,\r\n        templateUrl : 'searches/searches/searches.html',\r\n        scope : {\r\n            name : \"@\"\r\n        },\r\n        controller : ['$scope', function($scope:any) {\r\n            $scope.state = {\r\n                showSearchButton : true,\r\n                searches : []\r\n            }\r\n                    \r\n            $scope.switch = function (data:any) {\r\n                activate(data);\r\n            };\r\n            \r\n            this.add = function (data:any) {\r\n                console.log(\"Adding\");\r\n                $scope.state.searches.push(data);\r\n            };\r\n            \r\n            this.active = function (data:any) {\r\n                activate(data);\r\n            };        \r\n            \r\n            function activate(data:any) {\r\n                $scope.state.searches.forEach(function (item:any) {\r\n                    item.active = false;\r\n                });\r\n                data.active = true;                        \r\n            }\r\n        }]\r\n    };\r\n}) \r\n\r\n.directive('searchesSearch', function() {\r\n    return {\r\n        replace : true,\r\n        template:\"<div ng-transclude ng-show='active'></div>\",\r\n        transclude:true,\r\n        require : \"^searchesSearches\",\r\n        scope : {\r\n            label : \"@\",\r\n            active : \"=default\"\r\n        },\r\n        link : function(scope:any, element : any, attrs : any, ctrl : any) {\r\n            ctrl.add(scope); \r\n        }\r\n    };\r\n});\r\n    \r\n})(angular);"],"sourceRoot":"/source/"}